{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyNEcTyUmnFbr89P5CtsIoBZ"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"G20U85MvCx9H"},"outputs":[],"source":["from sklearn.linear_model import LinearRegression\n","LR=LinearRegression()"]},{"cell_type":"code","source":["t=[[5],[7],[12],[16],[20]]\n","m=[40,120,180,210,240]\n","LR.fit(t,m)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":75},"id":"9y-Ovu-QDQHf","executionInfo":{"status":"ok","timestamp":1709112805757,"user_tz":-330,"elapsed":10,"user":{"displayName":"Geethika Sri valli","userId":"07040162408620135309"}},"outputId":"7dfb3d48-2fe4-4c1f-f8d9-c27692fd5a86"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["LinearRegression()"],"text/html":["<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LinearRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LinearRegression</label><div class=\"sk-toggleable__content\"><pre>LinearRegression()</pre></div></div></div></div></div>"]},"metadata":{},"execution_count":3}]},{"cell_type":"code","source":["LR.predict([[5.5]])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mDmSGOdPD9Mj","executionInfo":{"status":"ok","timestamp":1709112845069,"user_tz":-330,"elapsed":5,"user":{"displayName":"Geethika Sri valli","userId":"07040162408620135309"}},"outputId":"73f0ee03-40d7-4a44-f85f-181cb9a5d00d"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([78.64935065])"]},"metadata":{},"execution_count":4}]},{"cell_type":"code","source":[],"metadata":{"id":"5NPe26EzEWxU"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from matplotlib  import pyplot as plt"],"metadata":{"id":"BfmOtnS5EXmT"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#plot\n","\n","plt.scatter(t,m,color='black') #plt.plot will give the exact line &plt.scatter will give the line\n","y_pred=LR.predict(t)\n","plt.plot(t,y_pred,color='blue',linewidth=1,marker=\"H\")\n","plt.xlabel(\"Time\")\n","plt.ylabel(\"Mass\")\n","plt.title(\" Linear Regression\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":489},"id":"_D4JBmsnE8-V","executionInfo":{"status":"ok","timestamp":1709113637507,"user_tz":-330,"elapsed":503,"user":{"displayName":"Geethika Sri valli","userId":"07040162408620135309"}},"outputId":"c74b6ab8-a684-42c2-b1c9-2523538d6e96"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Text(0.5, 1.0, ' Linear Regression')"]},"metadata":{},"execution_count":13},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["import numpy as np\n","from sklearn.linear_model import LogisticRegression\n"],"metadata":{"id":"0VvoVnJAL6-O"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["\n","# Distance and corresponding probability data\n","distances = np.array([1,2,5,10,15,20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30,35,40,41,47,50]).reshape(-1, 1)\n","probabilities = np.array([1,1,1,1,1,1,0.9, 0.85, 0.73, 0.67, 0.5, 0.47, 0.39, 0.31, 0.25, 0.15,0,0,0,0,0])\n","#convert probabilties into binary values\n","threshold=0.5\n","binary_labels=(probabilities>threshold)\n","#create and fit logistic\n","logr=LogisticRegression()\n","logr.fit(distances,binary_labels)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":75},"id":"h8gEvll5Mey9","executionInfo":{"status":"ok","timestamp":1709117180662,"user_tz":-330,"elapsed":5,"user":{"displayName":"Geethika Sri valli","userId":"07040162408620135309"}},"outputId":"058d1521-fc70-46d9-e5f0-e544e40bc90a"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["LogisticRegression()"],"text/html":["<style>#sk-container-id-4 {color: black;background-color: white;}#sk-container-id-4 pre{padding: 0;}#sk-container-id-4 div.sk-toggleable {background-color: white;}#sk-container-id-4 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-4 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-4 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-4 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-4 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-4 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-4 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-4 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-4 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-4 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-4 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-4 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-4 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-4 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-4 div.sk-item {position: relative;z-index: 1;}#sk-container-id-4 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-4 div.sk-item::before, #sk-container-id-4 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-4 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-4 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-4 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-4 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-4 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-4 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-4 div.sk-label-container {text-align: center;}#sk-container-id-4 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-4 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-4\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LogisticRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-4\" type=\"checkbox\" checked><label for=\"sk-estimator-id-4\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LogisticRegression</label><div class=\"sk-toggleable__content\"><pre>LogisticRegression()</pre></div></div></div></div></div>"]},"metadata":{},"execution_count":51}]},{"cell_type":"code","source":["p=logr.predict([[25]])\n","print(p)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"sSZdnZbyO3Qm","executionInfo":{"status":"ok","timestamp":1709117184657,"user_tz":-330,"elapsed":518,"user":{"displayName":"Geethika Sri valli","userId":"07040162408620135309"}},"outputId":"8ec3b739-514c-4468-bc5b-ade3abb9b613"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[False]\n"]}]},{"cell_type":"code","source":["if p==[True]:\n","  print(\"Goal\")\n","else:\n","  print(\"no goal\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gAWVlyMyO-7I","executionInfo":{"status":"ok","timestamp":1709115853595,"user_tz":-330,"elapsed":627,"user":{"displayName":"Geethika Sri valli","userId":"07040162408620135309"}},"outputId":"b9879265-26b4-49ec-938f-1869cd73b364"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["no goal\n"]}]},{"cell_type":"code","source":["#generate distances for presiction\n","dist=np.linspace(1,50,100).reshape(-1,1)\n","print(dist)\n","#make prediction using the model\n","prob=logr.predict_proba(dist) #probabilities-prediction\n","print(prob)"],"metadata":{"id":"tE6ZbpihPllC"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from matplotlib  import pyplot as plt\n","\n","plt.plot(dist,prob,color='blue',label='Logical Regression',marker=\"H\") #plt.plot will give the exact line &plt.scatter will give the line\n","plt.xlabel(\"Distance\")\n","plt.ylabel(\"Probability\")\n","plt.title(\"Distance vs Probability of scrorng\")\n","plt.legend()\n","plt.grid(True)\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":472},"id":"ULzMAFOEQrzP","executionInfo":{"status":"ok","timestamp":1709117470074,"user_tz":-330,"elapsed":851,"user":{"displayName":"Geethika Sri valli","userId":"07040162408620135309"}},"outputId":"424ccb5e-b48d-4d11-fff2-2e99c881bd8a"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"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\n"},"metadata":{}}]},{"cell_type":"code","source":["import pandas as pd\n","df=pd.read_csv(\"/content/demodt.txt\", sep=',')\n","df"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":865},"id":"6izd4f3bQrtg","executionInfo":{"status":"ok","timestamp":1709117496874,"user_tz":-330,"elapsed":490,"user":{"displayName":"Geethika Sri valli","userId":"07040162408620135309"}},"outputId":"048540af-4fca-4861-d44c-1d0a76220bf9"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   State  Literacy  Cleanliness  Crime_Rate  Good\n","0      A        92           90          54     0\n","1      B        56           67          50     1\n","2      C        78           85          62     0\n","3      D        63           72          48     1\n","4      E        85           79          55     0\n","5      F        71           68          58     0\n","6      G        80           83          51     0\n","7      H        67           74          47     1\n","8      I        89           88          53     0\n","9      J        58           65          49     1\n","10     K        82           81          60     0\n","11     L        75           78          57     0\n","12     M        69           70          46     1\n","13     N        87           86          52     0\n","14     O        61           63          45     1\n","15     P        93           91          56     0\n","16     Q        55           66          61     0\n","17     R        76           77          59     0\n","18     S        84           82          44     1\n","19     T        70           69          50     1\n","20     U        94           92          57     0\n","21     V        59           64          52     0\n","22     W        83           80          43     1\n","23     X        74           76          63     0\n","24     Y        68           73          41     1\n","25     Z        88           84          47     1"],"text/html":["\n","  <div id=\"df-d6c632e6-34d5-4a97-850b-766f658e1190\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>State</th>\n","      <th>Literacy</th>\n","      <th>Cleanliness</th>\n","      <th>Crime_Rate</th>\n","      <th>Good</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>A</td>\n","      <td>92</td>\n","      <td>90</td>\n","      <td>54</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>B</td>\n","      <td>56</td>\n","      <td>67</td>\n","      <td>50</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>C</td>\n","      <td>78</td>\n","      <td>85</td>\n","      <td>62</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>D</td>\n","      <td>63</td>\n","      <td>72</td>\n","      <td>48</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>E</td>\n","      <td>85</td>\n","      <td>79</td>\n","      <td>55</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>F</td>\n","      <td>71</td>\n","      <td>68</td>\n","      <td>58</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>G</td>\n","      <td>80</td>\n","      <td>83</td>\n","      <td>51</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>H</td>\n","      <td>67</td>\n","      <td>74</td>\n","      <td>47</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>I</td>\n","      <td>89</td>\n","      <td>88</td>\n","      <td>53</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>J</td>\n","      <td>58</td>\n","      <td>65</td>\n","      <td>49</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>10</th>\n","      <td>K</td>\n","      <td>82</td>\n","      <td>81</td>\n","      <td>60</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>11</th>\n","      <td>L</td>\n","      <td>75</td>\n","      <td>78</td>\n","      <td>57</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>12</th>\n","      <td>M</td>\n","      <td>69</td>\n","      <td>70</td>\n","      <td>46</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>13</th>\n","      <td>N</td>\n","      <td>87</td>\n","      <td>86</td>\n","      <td>52</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>14</th>\n","      <td>O</td>\n","      <td>61</td>\n","      <td>63</td>\n","      <td>45</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>15</th>\n","      <td>P</td>\n","      <td>93</td>\n","      <td>91</td>\n","      <td>56</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>16</th>\n","      <td>Q</td>\n","      <td>55</td>\n","      <td>66</td>\n","      <td>61</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>17</th>\n","      <td>R</td>\n","      <td>76</td>\n","      <td>77</td>\n","      <td>59</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>18</th>\n","      <td>S</td>\n","      <td>84</td>\n","      <td>82</td>\n","      <td>44</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>19</th>\n","      <td>T</td>\n","      <td>70</td>\n","      <td>69</td>\n","      <td>50</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>20</th>\n","      <td>U</td>\n","      <td>94</td>\n","      <td>92</td>\n","      <td>57</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>21</th>\n","      <td>V</td>\n","      <td>59</td>\n","      <td>64</td>\n","      <td>52</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>22</th>\n","      <td>W</td>\n","      <td>83</td>\n","      <td>80</td>\n","      <td>43</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>23</th>\n","      <td>X</td>\n","      <td>74</td>\n","      <td>76</td>\n","      <td>63</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>24</th>\n","      <td>Y</td>\n","      <td>68</td>\n","      <td>73</td>\n","      <td>41</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>25</th>\n","      <td>Z</td>\n","      <td>88</td>\n","      <td>84</td>\n","      <td>47</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d6c632e6-34d5-4a97-850b-766f658e1190')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-d6c632e6-34d5-4a97-850b-766f658e1190 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-d6c632e6-34d5-4a97-850b-766f658e1190');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-56cd9d9f-7313-45df-b303-0b34d11340e3\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-56cd9d9f-7313-45df-b303-0b34d11340e3')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-56cd9d9f-7313-45df-b303-0b34d11340e3 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_5e98ae51-df05-4d5c-92c2-b30333c870c7\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_5e98ae51-df05-4d5c-92c2-b30333c870c7 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('df');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df","summary":"{\n  \"name\": \"df\",\n  \"rows\": 26,\n  \"fields\": [\n    {\n      \"column\": \"State\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 26,\n        \"samples\": [\n          \"I\",\n          \"Q\",\n          \"A\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Literacy\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 12,\n        \"min\": 55,\n        \"max\": 94,\n        \"num_unique_values\": 26,\n        \"samples\": [\n          89,\n          55,\n          92\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Cleanliness\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8,\n        \"min\": 63,\n        \"max\": 92,\n        \"num_unique_values\": 26,\n        \"samples\": [\n          88,\n          66,\n          90\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Crime_Rate\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6,\n        \"min\": 41,\n        \"max\": 63,\n        \"num_unique_values\": 22,\n        \"samples\": [\n          54,\n          52,\n          53\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Good\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":69}]},{"cell_type":"code","source":["import numpy as np\n","cr=np.array(df[\"Crime_Rate\"]),reshape(-1,1)\n","y=np.array(df[\"Good\"])\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":478},"id":"LYbPobHvSxsH","executionInfo":{"status":"error","timestamp":1709117500449,"user_tz":-330,"elapsed":419,"user":{"displayName":"Geethika Sri valli","userId":"07040162408620135309"}},"outputId":"cac739cc-841e-4c60-dd74-05d7b1ad9fb1"},"execution_count":null,"outputs":[{"output_type":"error","ename":"KeyError","evalue":"'Crime_rate'","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36mget_loc\u001b[0;34m(self, key, method, tolerance)\u001b[0m\n\u001b[1;32m   3801\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3802\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcasted_key\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3803\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mKeyError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/_libs/index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/_libs/index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n","\u001b[0;32mpandas/_libs/hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n","\u001b[0;32mpandas/_libs/hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n","\u001b[0;31mKeyError\u001b[0m: 'Crime_rate'","\nThe above exception was the direct cause of the following exception:\n","\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)","\u001b[0;32m<ipython-input-70-c1346c024b7f>\u001b[0m in \u001b[0;36m<cell line: 2>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mnumpy\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mcR\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"Crime_rate\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"Good\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   3805\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnlevels\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3806\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_getitem_multilevel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3807\u001b[0;31m             \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3808\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mis_integer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3809\u001b[0m                 \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36mget_loc\u001b[0;34m(self, key, method, tolerance)\u001b[0m\n\u001b[1;32m   3802\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcasted_key\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3803\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mKeyError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3804\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3805\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mTypeError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3806\u001b[0m                 \u001b[0;31m# If we have a listlike key, _check_indexing_error will raise\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyError\u001b[0m: 'Crime_rate'"]}]},{"cell_type":"code","source":["from sklearn.linear_model import LogisticRegression\n","model=LogisticRegression"],"metadata":{"id":"ZsSun1leTeky"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["model.fit(cr,y)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":141},"id":"_-1T3ydXT-Ii","executionInfo":{"status":"error","timestamp":1709117020711,"user_tz":-330,"elapsed":404,"user":{"displayName":"Geethika Sri valli","userId":"07040162408620135309"}},"outputId":"8484cb8b-8c09-4177-e44a-9112620374a8"},"execution_count":null,"outputs":[{"output_type":"error","ename":"NameError","evalue":"name 'cr' is not defined","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-34-a7e71195e2b0>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcr\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mNameError\u001b[0m: name 'cr' is not defined"]}]},{"cell_type":"code","source":["model.predict([[45]])\n"],"metadata":{"id":"TmewzU1IUYKG"},"execution_count":null,"outputs":[]}]}